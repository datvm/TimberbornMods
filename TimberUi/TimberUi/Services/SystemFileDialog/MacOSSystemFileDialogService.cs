using System.Diagnostics;

namespace TimberUi.Services.SystemFileDialog;

public class MacOSSystemFileDialogService : ISystemFileDialogService
{
    public string? ShowOpenFileDialog(string? filter = default)
    {
        string script = BuildOpenScript(filter);
        return RunAppleScript(script);
    }

    public string? ShowSaveFileDialog(string? filter = default)
    {
        string script = BuildSaveScript(filter);
        return RunAppleScript(script);
    }

    // WARNING: Code generated by AI and is not tested

    // --- Internal helpers ---

    private static string BuildOpenScript(string? filter)
    {
        string filterPart = BuildFilterScriptPart(filter);
        return
            "set _types to " + filterPart + "\n" +
            "try\n" +
            "    set f to choose file of type _types with prompt \"Select a file to open\"\n" +
            "    POSIX path of f\n" +
            "on error\n" +
            "    return \"\"\n" +
            "end try";
    }

    private static string BuildSaveScript(string? filter)
    {
        string filterPart = BuildFilterScriptPart(filter);
        // Note: Save dialog can use suggest file type for new file, but can't *enforce* it for new files
        return
            "set _types to " + filterPart + "\n" +
            "try\n" +
            "    set f to choose file name with prompt \"Save file as\"\n" +
            "    POSIX path of f\n" +
            "on error\n" +
            "    return \"\"\n" +
            "end try";
    }

    // Builds AppleScript file type list from ".jpg;.png" => {"jpg","png"}; null => {}
    private static string BuildFilterScriptPart(string? filter)
    {
        if (string.IsNullOrWhiteSpace(filter))
            return "{}";
        var types = filter
            .Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)
            .Select(ext => ext.TrimStart('.').ToLowerInvariant())
            .Select(ext => $"\"{ext}\"");
        return "{" + string.Join(",", types) + "}";
    }

    private static string? RunAppleScript(string script)
    {
        var psi = new ProcessStartInfo
        {
            FileName = "osascript",
            Arguments = $"-e {EscapeArg(script)}",
            RedirectStandardOutput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };

        try
        {
            using (var proc = Process.Start(psi))
            {
                string? output = proc?.StandardOutput.ReadToEnd();
                proc?.WaitForExit();
                if (proc != null && proc.ExitCode == 0)
                {
                    if (!string.IsNullOrWhiteSpace(output))
                        return output.Trim();
                }
            }
        }
        catch
        {
            // Fallback if something goes wrong
        }
        return null;
    }

    // Safely wrap the AppleScript in quotes and escape
    private static string EscapeArg(string arg)
    {
        // For osascript, best to wrap in single quotes and escape single quotes inside
        return "'" + arg.Replace("'", "'\\''") + "'";
    }
}
